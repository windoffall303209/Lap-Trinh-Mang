//Data Stream
import java.util.*;
import java.io.*;
import java.net.*;
public class h9wUSsFlX {
    public static String arrayToString(int[] a){
        StringBuilder sb = new StringBuilder();
        for(int i=0; i <a.length; i++){
            sb.append(a[i]);
            sb.append(",");
        }
        sb.delete(sb.length()-1,sb.length());
        return sb.toString();
    }
    public static void CatMang(int [] a, int k){
        int n = a.length;
        for(int i = 0; i < n; i+=k){
            int left = i;
            int right = Math.min(i+k-1,n-1);
            while(left < right){
                int temp = a[left];
                a[left] = a[right];
                a[right] = temp;
                left++;
                right--;
            }
        }
    }
    public static void main(String[] args) throws IOException {
        Socket socket = new Socket("203.162.10.109", 2207);
        DataInputStream in = new DataInputStream(socket.getInputStream());
        DataOutputStream out = new DataOutputStream(socket.getOutputStream());
        String ma = "B22DCCN568;9wUSsFlX";
        out.writeUTF(ma);
        out.flush();
        int k = in.readInt();
        String arr = in.readUTF();
        System.out.println("S·ªë c·∫ßn c·∫Øt" +k);

        int[] a = Arrays.stream(arr.split(",")).map(String::trim).mapToInt(Integer::parseInt).toArray();
        System.out.println("M·∫£ng a l√†" +Arrays.toString(a));
        CatMang(a, k);
        String res = arrayToString(a);
        System.out.println("K·∫øt qu·∫£" + res);
        out.writeUTF(res);
        out.flush();
        in.close();
        out.close();
        socket.close();
    }
}
//Character Stream
import java.io.*;
import java.net.*;
public class Check {
    // ƒê·∫£o ng∆∞·ª£c t·ª´
    public static String reverse(String s) {
        return new StringBuilder(s).reverse().toString();
    }
    // RLE cho 1 t·ª´
    public static String RLE(String s) {
        StringBuilder sb = new StringBuilder();
        int n = s.length();
        for (int i = 0; i < n; ) {
            char c = s.charAt(i);
            int count = 1;
            int j = i + 1;
            while (j < n && s.charAt(j) == c) {
                count++;
                j++;
            }
            sb.append(c);
            if (count > 1) sb.append(count);
            i = j;
        }
        return sb.toString();
    }
    public static void main(String[] args) throws IOException {
        String host = "203.162.10.109";
        int port = 2208;
        String studentCode = "B22DCCN568";
        String qCode = "rSLVtWie";
        Socket socket = new Socket(host, port);
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
        // a. G·ª≠i chu·ªói m√£ sinh vi√™n v√† m√£ c√¢u h·ªèi
        out.write(studentCode + ";" + qCode);
        out.newLine(); // C·ª±c k·ª≥ quan tr·ªçng!
        out.flush();
        // b. Nh·∫≠n chu·ªói t·ª´ server
        String line = in.readLine();
        System.out.println("Received: " + line);
        // c. ƒê·∫£o ng∆∞·ª£c v√† RLE t·ª´ng t·ª´
        String[] words = line.trim().split("\\s+");
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < words.length; i++) {
            String rev = reverse(words[i]);
            String encoded = RLE(rev);
            result.append(encoded);
            if (i != words.length - 1) result.append(" ");
        }
        // G·ª≠i chu·ªói ƒë√£ x·ª≠ l√Ω l√™n server
        out.write(result.toString());
        out.newLine();
        out.flush();
        // ƒê√≥ng k·∫øt n·ªëi
        in.close();
        out.close();
        socket.close();
    }
}
// Byte Stream
import java.util.*;
import java.io.*;
import java.net.*;
public class h9wUSsFlX {
    public static String arrayToString(int[] a){
        StringBuilder sb = new StringBuilder();
        for(int i=0; i <a.length; i++){
            sb.append(a[i]);
            sb.append(",");
        }
        sb.delete(sb.length()-1,sb.length());
        return sb.toString();
    }
    public static void CatMang(int [] a, int k){
        int n = a.length;
        for(int i = 0; i < n; i+=k){
            int left = i;
            int right = Math.min(i+k-1,n-1);
            while(left < right){
                int temp = a[left];
                a[left] = a[right];
                a[right] = temp;
                left++;
                right--;
            }
        }
    }
    public static void main(String[] args) throws IOException {
        Socket socket = new Socket("203.162.10.109", 2207);
        DataInputStream in = new DataInputStream(socket.getInputStream());
        DataOutputStream out = new DataOutputStream(socket.getOutputStream());
        String ma = "B22DCCN568;9wUSsFlX";
        out.writeUTF(ma);
        out.flush();
        int k = in.readInt();
        String arr = in.readUTF();
        System.out.println("S·ªë c·∫ßn c·∫Øt" +k);
        int[] a = Arrays.stream(arr.split(",")).map(String::trim).mapToInt(Integer::parseInt).toArray();
        System.out.println("M·∫£ng a l√†" +Arrays.toString(a));
        CatMang(a, k);
        String res = arrayToString(a);
        System.out.println("K·∫øt qu·∫£" + res);
        out.writeUTF(res);
        out.flush();
        in.close();
        out.close();
        socket.close();
    }
}
// Object Stream File class
package TCP;
import java.io.Serializable;
// L·ªõp Address ph·∫£i implements Serializable ƒë·ªÉ c√≥ th·ªÉ g·ª≠i qua lu·ªìng ƒë·ªëi t∆∞·ª£ng
public class Address implements Serializable {
    // serialVersionUID ph·∫£i kh·ªõp v·ªõi server ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
    private static final long serialVersionUID = 20180801L;
    private int id;
    private String code;
    private String addressLine;
    private String city;
    private String postalCode;
    // Constructor, getters v√† setters
    public Address(int id, String code, String addressLine, String city, String postalCode) {
        this.id = id;
        this.code = code;
        this.addressLine = addressLine;
        this.city = city;
        this.postalCode = postalCode;
    }
    // Getters
    public int getId() { return id; }
    public String getCode() { return code; }
    public String getAddressLine() { return addressLine; }
    public String getCity() { return city; }
    public String getPostalCode() { return postalCode; }
    // Setters
    public void setAddressLine(String addressLine) {
        this.addressLine = addressLine;
    }
    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }
    @Override
    public String toString() {
        return "Address{" +
                "id=" + id +
                ", code='" + code + '\'' +
                ", addressLine='" + addressLine + '\'' +
                ", city='" + city + '\'' +
                ", postalCode='" + postalCode + '\'' +
                '}';
    }
} //File main
package TCP; // Import l·ªõp Address t·ª´ package TCP
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
public class Client_iYU7RXAZ {
    public static void main(String[] args) {
        final String SERVER_IP = "203.162.10.109";
        final int SERVER_PORT = 2209;
        final int TIMEOUT = 5000;
        try (Socket socket = new Socket(SERVER_IP, SERVER_PORT)) {
            socket.setSoTimeout(TIMEOUT);
            // Quan tr·ªçng: Kh·ªüi t·∫°o ObjectOutputStream TR∆Ø·ªöC ObjectInputStream
            // ƒë·ªÉ tr√°nh deadlock khi c·∫£ client v√† server c√πng ch·ªù nhau.
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            System.out.println("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server: " + SERVER_IP + " t·∫°i c·ªïng " + SERVER_PORT);
            // a. G·ª≠i ƒë·ªëi t∆∞·ª£ng chu·ªói ch·ª©a m√£ sinh vi√™n v√† m√£ c√¢u h·ªèi
            String studentCode = "B22DCCN568"; // <<<--- THAY M√É SINH VI√äN C·ª¶A B·∫†N V√ÄO ƒê√ÇY
            String qCode = "iYU7RXAZ";
            String initialObject = studentCode + ";" + qCode;
            oos.writeObject(initialObject);
            oos.flush();
            System.out.println("-> ƒê√£ g·ª≠i object: \"" + initialObject + "\"");
            // b. Nh·∫≠n ƒë·ªëi t∆∞·ª£ng Address v√† th·ª±c hi·ªán chu·∫©n h√≥a
            Address receivedAddress = (Address) ois.readObject();
            System.out.println("<- ƒê√£ nh·∫≠n object: " + receivedAddress);
            // Chu·∫©n h√≥a addressLine
            String rawAddressLine = receivedAddress.getAddressLine();
            String normalizedAddressLine = normalizeAddressLine(rawAddressLine);
            receivedAddress.setAddressLine(normalizedAddressLine);
            // Chu·∫©n h√≥a postalCode
            String rawPostalCode = receivedAddress.getPostalCode();
            String normalizedPostalCode = rawPostalCode.replaceAll("[^0-9-]", "");
            receivedAddress.setPostalCode(normalizedPostalCode);
            System.out.println("üîÑ ƒê√£ chu·∫©n h√≥a object: " + receivedAddress);
            // c. G·ª≠i ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a l√™n server
            oos.writeObject(receivedAddress);
            oos.flush();
            System.out.println("-> ƒê√£ g·ª≠i object ƒë√£ chu·∫©n h√≥a.");
            System.out.println("‚ú® Ho√†n th√†nh t√°c v·ª•.");
            // d. ƒê√≥ng k·∫øt n·ªëi (try-with-resources s·∫Ω t·ª± ƒë·ªông ƒë√≥ng oos, ois v√† socket)
        } catch (UnknownHostException e) {
            System.err.println(" L·ªói: Kh√¥ng t√¨m th·∫•y server t·∫°i ƒë·ªãa ch·ªâ " + SERVER_IP);
        } catch (IOException e) {
            System.err.println(" L·ªói I/O: " + e.getMessage());
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.err.println(" L·ªói: Kh√¥ng t√¨m th·∫•y class 'TCP.Address' khi nh·∫≠n ƒë·ªëi t∆∞·ª£ng.");
            e.printStackTrace();
        } finally {
            System.out.println("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi v√† k·∫øt th√∫c ch∆∞∆°ng tr√¨nh.");
        }
    }
    public static String normalizeAddressLine(String address) {
        if (address == null || address.trim().isEmpty()) {
            return "";
        }
        // 1. Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i l√† ch·ªØ, s·ªë ho·∫∑c kho·∫£ng tr·∫Øng
        String cleaned = address.replaceAll("[^a-zA-Z0-9\\s]", "");
        // 2. Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu/cu·ªëi v√† gi·ªØa c√°c t·ª´
        String trimmed = cleaned.trim().replaceAll("\\s+", " ");

        String[] words = trimmed.split(" ");
        StringBuilder result = new StringBuilder();
        for (String word : words) {
            if (word.length() > 0) {
                // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n v√† vi·∫øt th∆∞·ªùng ph·∫ßn c√≤n l·∫°i
                result.append(Character.toUpperCase(word.charAt(0)))
                        .append(word.substring(1).toLowerCase())
                        .append(" ");
            }
        }
        // X√≥a kho·∫£ng tr·∫Øng cu·ªëi c√πng
        return result.toString().trim();
    }
}
